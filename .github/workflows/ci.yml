name: Code Quality Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: |
          # Allow lockfile updates for Dependabot PRs
          if [ "${{ github.actor }}" == "dependabot[bot]" ]; then
            bun install
          else
            bun install --frozen-lockfile
          fi

      - name: Run ESLint
        id: eslint
        run: |
          echo "::group::Running ESLint..."
          if ! bun run lint; then
            echo "::endgroup::"
            echo "::error::❌ ESLint check failed!"
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "❌ LINTING FAILED"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo ""
            echo "Your code has linting errors that must be fixed before merging."
            echo ""
            echo "🔧 To fix locally:"
            echo "   1. Run: bun run lint"
            echo "   2. Fix the errors shown above"
            echo "   3. Commit and push the fixes"
            echo ""
            echo "💡 Some errors can be auto-fixed:"
            echo "   Run: bunx eslint . --fix"
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            exit 1
          fi
          echo "::endgroup::"
          echo "✅ ESLint passed"

      - name: Check code formatting
        id: prettier
        if: success() || failure()
        run: |
          echo "::group::Checking code formatting..."
          if ! bun run format:check; then
            echo "::endgroup::"
            echo "::error::❌ Code formatting check failed!"
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "❌ FORMATTING CHECK FAILED"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo ""
            echo "Your code is not properly formatted."
            echo ""
            echo "🔧 To fix locally:"
            echo "   1. Run: bun run format"
            echo "   2. Review the changes"
            echo "   3. Commit with: git add . && git commit -m 'chore: format code'"
            echo "   4. Push: git push"
            echo ""
            echo "📋 Files that need formatting are listed above."
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            exit 1
          fi
          echo "::endgroup::"
          echo "✅ Formatting check passed"

      - name: TypeScript type checking
        id: typecheck
        if: success() || failure()
        run: |
          echo "::group::Running TypeScript type check..."
          if ! bun run typecheck; then
            echo "::endgroup::"
            echo "::error::❌ TypeScript type check failed!"
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "❌ TYPE CHECK FAILED"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo ""
            echo "Your code has TypeScript type errors that must be fixed."
            echo ""
            echo "🔧 To fix locally:"
            echo "   1. Run: bun run typecheck"
            echo "   2. Review and fix the type errors shown above"
            echo "   3. Common issues:"
            echo "      - Missing type annotations"
            echo "      - Incorrect type usage"
            echo "      - Missing imports"
            echo "      - Type mismatches"
            echo "   4. Commit and push the fixes"
            echo ""
            echo "💡 Tips:"
            echo "   - Use TypeScript strict mode for better type safety"
            echo "   - Check .nuxt/tsconfig.json for configuration"
            echo "   - Run 'bun run dev' to see types in your IDE"
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            exit 1
          fi
          echo "::endgroup::"
          echo "✅ Type check passed"

      - name: Summary
        if: always()
        run: |
          echo "## 📊 Code Quality Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.eslint.outcome }}" == "success" ]; then
            echo "✅ **ESLint**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **ESLint**: Failed - Run \`bun run lint\` to see errors" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ steps.prettier.outcome }}" == "success" ]; then
            echo "✅ **Prettier**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Prettier**: Failed - Run \`bun run format\` to fix" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ steps.typecheck.outcome }}" == "success" ]; then
            echo "✅ **TypeScript**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **TypeScript**: Failed - Run \`bun run typecheck\` to see errors" >> $GITHUB_STEP_SUMMARY
          fi

  build:
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: |
          # Allow lockfile updates for Dependabot PRs
          if [ "${{ github.actor }}" == "dependabot[bot]" ]; then
            bun install
          else
            bun install --frozen-lockfile
          fi

      - name: Build project
        id: build
        run: |
          echo "::group::Building project..."
          if ! bun run build; then
            echo "::endgroup::"
            echo "::error::❌ Build failed!"
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "❌ BUILD FAILED"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo ""
            echo "The project failed to build. This must be fixed before merging."
            echo ""
            echo "🔧 To debug locally:"
            echo "   1. Run: bun run build"
            echo "   2. Fix the errors shown above"
            echo "   3. Test again until build succeeds"
            echo "   4. Commit and push the fixes"
            echo ""
            echo "💡 Common issues:"
            echo "   - TypeScript errors"
            echo "   - Missing dependencies"
            echo "   - Configuration issues"
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            exit 1
          fi
          echo "::endgroup::"
        timeout-minutes: 10

      - name: Check build output
        run: |
          if [ ! -d "dist" ]; then
            echo "::error::❌ Build failed: dist directory not created"
            exit 1
          fi
          echo "✅ Build successful - dist directory created"

      - name: Summary
        if: always()
        run: |
          echo "## 🏗️ Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.build.outcome }}" == "success" ]; then
            echo "✅ **Build**: Successful" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Your code compiled successfully and is ready to deploy! 🚀" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build**: Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔧 How to fix:" >> $GITHUB_STEP_SUMMARY
            echo "1. Run \`bun run build\` locally" >> $GITHUB_STEP_SUMMARY
            echo "2. Fix the errors" >> $GITHUB_STEP_SUMMARY
            echo "3. Commit and push" >> $GITHUB_STEP_SUMMARY
          fi
